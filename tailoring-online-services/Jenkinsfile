pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        MICRO_SERVICES = 'config-server,eureka-server,api-gateway-service,user-management-service,store-management-service,localization-shipping-service,loyalty-program-service,notification-mailing-service,order-management-service,payment-banking-service,promotion-management-service,review-management-service,social-management-service'
    }

    stages {
        stage('Checkout Source Code from Git Repository') {
            steps {
                echo 'Fetching the latest source code from the Git repository...'
                git branch: 'main',
                    credentialsId: '8f1de731-7401-44dd-aa00-21e55ee42ab9',
                    url: 'https://github.com/YassineOularbi/FILL-ROUGE-TAILORING-ONLINE.git'
            }
        }

        stage('Maven Build for MicroServices TAILORING ONLINE') {
            steps {
                script {
                    echo 'Starting the build process for microservices...'
                    def parallelStages = [:]

                    env.MICRO_SERVICES.split(',').each { service ->
                        parallelStages["Build ${service.capitalize()}"] = {
                            stage("Build ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn clean'
                                    sh 'mvn dependency:resolve'
                                    sh 'mvn validate'
                                    sh 'mvn compile'

                                    if (!service.contains('config-server') && !service.contains('eureka-server') && !service.contains('api-gateway-service')) {
                                        sh 'mvn test-compile'
                                        sh 'mvn test'
                                        sh 'mvn integration-test'
                                    }

                                    sh 'mvn verify'
                                    sh 'mvn package'
                                    sh 'mvn install'
                                }
                            }
                        }
                    }

                    parallel parallelStages
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up the workspace after the build...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully. All stages passed.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}