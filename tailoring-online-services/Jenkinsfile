pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        MICRO_SERVICES = 'config-server,eureka-server,api-gateway-service,user-management-service,store-management-service,localization-shipping-service,loyalty-program-service,notification-mailing-service,order-management-service,payment-banking-service,promotion-management-service,review-management-service,social-management-service'
        SONAR_TOKEN = credentials('sonar-token')
        SONARQUBE = 'sonarqube'
    }

    stages {
        stage('Checkout Source Code from Git Repository') {
            steps {
                echo 'Fetching the latest source code from the Git repository...'
                git branch: 'main',
                    credentialsId: '8f1de731-7401-44dd-aa00-21e55ee42ab9',
                    url: 'https://github.com/YassineOularbi/FILL-ROUGE-TAILORING-ONLINE.git'
            }
        }

//         stage('Maven Build for MicroServices TAILORING ONLINE') {
//             steps {
//                 script {
//                     def parallelStages = [:]
//
//                     env.MICRO_SERVICES.split(',').each { service ->
//                         parallelStages["Process ${service.capitalize()}"] = {
//                             stage("Clean ${service.capitalize()}") {
//                                 dir("tailoring-online-services/${service}") {
//                                     sh 'mvn clean'
//                                 }
//                             }
//
//                             stage("Resolve Dependencies for ${service.capitalize()}") {
//                                 dir("tailoring-online-services/${service}") {
//                                     sh 'mvn dependency:resolve'
//                                 }
//                             }
//
//                             stage("Validate ${service.capitalize()}") {
//                                 dir("tailoring-online-services/${service}") {
//                                     sh 'mvn validate'
//                                 }
//                             }
//
//                             stage("Compile ${service.capitalize()}") {
//                                 dir("tailoring-online-services/${service}") {
//                                     sh 'mvn compile'
//                                 }
//                             }
//
//                             if (!service.contains('config-server') && !service.contains('eureka-server') && !service.contains('api-gateway-service') && !service.contains('social-management-service') && !service.contains('review-management-service') && !service.contains('promotion-management-service') && !service.contains('loyalty-program-service')) {
//                                 stage("Compile Tests for ${service.capitalize()}") {
//                                     dir("tailoring-online-services/${service}") {
//                                         sh 'mvn test-compile'
//                                     }
//                                 }
//
//                                 stage("Run Unit Tests for ${service.capitalize()}") {
//                                     dir("tailoring-online-services/${service}") {
//                                         sh 'mvn test'
//                                     }
//                                 }
//
//                                 stage("Run Integration Tests for ${service.capitalize()}") {
//                                     dir("tailoring-online-services/${service}") {
//                                         sh 'mvn integration-test'
//                                     }
//                                 }
//                             }
//
//                             stage("Verify ${service.capitalize()}") {
//                                 dir("tailoring-online-services/${service}") {
//                                     sh 'mvn verify'
//                                 }
//                             }
//
//                             stage("Package ${service.capitalize()}") {
//                                 dir("tailoring-online-services/${service}") {
//                                     sh 'mvn package'
//                                 }
//                             }
//
//                             stage("Install ${service.capitalize()}") {
//                                 dir("tailoring-online-services/${service}") {
//                                     sh 'mvn install'
//                                 }
//                             }
//                         }
//                     }
//
//                     parallel parallelStages
//                 }
//             }
//         }
//
//         stage('SonarQube Analysis for MicroServices TAILORING ONLINE') {
//             steps {
//                 script {
//                     def parallelSonarStages = [:]
//                     env.MICRO_SERVICES.split(',').each { service ->
//                         parallelSonarStages["SonarQube Analysis for ${service.capitalize()}"] = {
//                             dir("tailoring-online-services/${service}") {
//                                 if (!service.contains('config-server') && !service.contains('eureka-server') && !service.contains('api-gateway-service') && !service.contains('social-management-service') && !service.contains('review-management-service') && !service.contains('promotion-management-service') && !service.contains('loyalty-program-service')) {
//                                     withSonarQubeEnv(env.SONARQUBE) {
//                                         sh """
//                                             mvn sonar:sonar \
//                                             -Dsonar.token=${SONAR_TOKEN}
//                                         """
//                                     }
//                                 } else {
//                                     withSonarQubeEnv(env.SONARQUBE) {
//                                         sh """
//                                             mvn sonar:sonar \
//                                             -Dsonar.token=${SONAR_TOKEN} \
//                                             -DskipTests=true
//                                         """
//                                     }
//                                 }
//                             }
//                         }
//                     }
//                     parallel parallelSonarStages
//                 }
//             }
//         }
//
//         stage('Quality Gate Check for MicroServices TAILORING ONLINE') {
//             steps {
//                 timeout(time: 5, unit: 'MINUTES') {
//                     waitForQualityGate abortPipeline: true
//                 }
//             }
//         }
    stage('Clean Up Docker Resources for MicroServices TAILORING ONLINE') {
        steps {
            script {
                def parallelCleanStages = [:]

                env.MICRO_SERVICES.split(',').each { service ->
                    def serviceName = service.capitalize()
                    def containerName = "tailoring-online-services-${service}"
                    def imageName = "tailoring-online-services-${service}"

                    parallelCleanStages["Clean Up for ${serviceName}"] = {
                        dir("tailoring-online-services/${service}") {
                            stage("Clean Containers and Images for ${serviceName}") {
                                parallel(
                                    "Remove Containers": {
                                        sh """
                                            if [ \$(docker ps -a -q -f name=${containerName}) ]; then
                                                docker stop ${containerName} || true
                                                docker rm ${containerName} || true
                                            fi
                                        """
                                    },
                                    "Remove Images": {
                                        sh """
                                            if [ \$(docker images -q ${imageName}) ]; then
                                                docker rmi ${imageName} || true
                                            fi
                                        """
                                    }
                                )
                            }
                        }
                    }
                }

                parallel parallelCleanStages
            }
        }
    }

//     stage('Docker Build Images for MicroServices TAILORING ONLINE') {
//         steps {
//             script {
//                 def parallelBuildStages = [:]
//
//                 env.MICRO_SERVICES.split(',').each { service ->
//                     def serviceName = service.capitalize()
//
//                     parallelBuildStages["Build Docker Image for ${serviceName}"] = {
//                         dir("tailoring-online-services/${service}") {
//                             stage("Build Docker Image for ${serviceName}") {
//                                 sh "docker build -t tailoring-online-services-${service} ."
//                             }
//                         }
//                     }
//                 }
//
//                 parallel parallelBuildStages
//             }
//         }
//     }

    }

    post {
        always {
            echo 'Cleaning up the workspace after the build...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully. All stages passed.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}