pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        MICRO_SERVICES = 'config-server,eureka-server,api-gateway-service,user-management-service,store-management-service,localization-shipping-service,loyalty-program-service,notification-mailing-service,order-management-service,payment-banking-service,promotion-management-service,review-management-service,social-management-service'
        SONAR_TOKEN = credentials('sonar-token')
        SONARQUBE = 'sonarqube'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-token')
        DOCKERHUB_USERNAME = 'yassineoularbi4'
        DOCKERHUB_REPO = 'tailoring-online-services'
        GITHUB_CREDENTIALS = credentials('github-token')
    }

    triggers {
        pollSCM('*/5 * * * *')
    }

    stages {
        stage('Checkout Source Code from Git Repository') {
            steps {
                echo 'Fetching the latest source code from the Git repository...'
                git branch: 'main',
                    credentialsId: 'github-token',
                    url: 'https://github.com/YassineOularbi/FILL-ROUGE-TAILORING-ONLINE.git'
            }
        }

        stage('Maven Build for MicroServices TAILORING ONLINE') {
            steps {
                script {
                    def parallelStages = [:]

                    env.MICRO_SERVICES.split(',').each { service ->
                        parallelStages["Process ${service.capitalize()}"] = {
                            stage("Clean ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn clean'
                                }
                            }

                            stage("Resolve Dependencies for ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn dependency:resolve'
                                }
                            }

                            stage("Validate ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn validate'
                                }
                            }

                            stage("Compile ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn compile'
                                }
                            }

                            if (!service.contains('config-server') && !service.contains('eureka-server') && !service.contains('api-gateway-service') && !service.contains('social-management-service') && !service.contains('review-management-service') && !service.contains('promotion-management-service') && !service.contains('loyalty-program-service')) {
                                stage("Compile Tests for ${service.capitalize()}") {
                                    dir("tailoring-online-services/${service}") {
                                        sh 'mvn test-compile'
                                    }
                                }

                                stage("Run Unit Tests for ${service.capitalize()}") {
                                    dir("tailoring-online-services/${service}") {
                                        sh 'mvn test'
                                    }
                                }

                                stage("Run Integration Tests for ${service.capitalize()}") {
                                    dir("tailoring-online-services/${service}") {
                                        sh 'mvn integration-test'
                                    }
                                }
                            }

                            stage("Verify ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn verify'
                                }
                            }

                            stage("Package ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn package'
                                }
                            }

                            stage("Install ${service.capitalize()}") {
                                dir("tailoring-online-services/${service}") {
                                    sh 'mvn install'
                                }
                            }
                        }
                    }

                    parallel parallelStages
                }
            }
        }

        stage('SonarQube Analysis for MicroServices TAILORING ONLINE') {
            steps {
                script {
                    def parallelSonarStages = [:]
                    env.MICRO_SERVICES.split(',').each { service ->
                        parallelSonarStages["SonarQube Analysis for ${service.capitalize()}"] = {
                            dir("tailoring-online-services/${service}") {
                                if (!service.contains('config-server') && !service.contains('eureka-server') && !service.contains('api-gateway-service') && !service.contains('social-management-service') && !service.contains('review-management-service') && !service.contains('promotion-management-service') && !service.contains('loyalty-program-service')) {
                                    withSonarQubeEnv(env.SONARQUBE) {
                                        sh """
                                            mvn sonar:sonar \
                                            -Dsonar.token=${SONAR_TOKEN}
                                        """
                                    }
                                } else {
                                    withSonarQubeEnv(env.SONARQUBE) {
                                        sh """
                                            mvn sonar:sonar \
                                            -Dsonar.token=${SONAR_TOKEN} \
                                            -DskipTests=true
                                        """
                                    }
                                }
                            }
                        }
                    }
                    parallel parallelSonarStages
                }
            }
        }

        stage('Quality Gate Check for MicroServices TAILORING ONLINE') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Clean Up Docker Resources for MicroServices TAILORING ONLINE') {
            steps {
                script {
                    def parallelCleanStages = [:]

                    env.MICRO_SERVICES.split(',').each { service ->
                        parallelCleanStages["Clean Up for ${service.capitalize()}"] = {
                            dir("tailoring-online-services/${service}") {
                                stage("Clean Containers and Images for ${service.capitalize()}") {
                                    parallel(
                                        "Force Stop and Remove Containers": {
                                            sh """
                                                if [ \$(docker ps -a -q -f name=${service}) ]; then
                                                    docker stop -t 0 ${service} || true
                                                    docker rm -f ${service} || true
                                                fi
                                            """
                                        },
                                        "Force Remove Images": {
                                            sh """
                                                if [ \$(docker images -q tailoring-online-services-${service}) ]; then
                                                    docker rmi -f tailoring-online-services-${service} || true
                                                fi
                                            """
                                        }
                                    )
                                }
                            }
                        }
                    }

                    parallel parallelCleanStages
                }
            }
        }

        stage('Docker Build Images for MicroServices TAILORING ONLINE') {
            steps {
                script {
                    def parallelBuildStages = [:]

                    env.MICRO_SERVICES.split(',').each { service ->
                        parallelBuildStages["Build Docker Image for ${service.capitalize()}"] = {
                            dir("tailoring-online-services/${service}") {
                                stage("Build Docker Image for ${service.capitalize()}") {
                                    sh "docker build -t tailoring-online-services-${service} ."
                                }
                            }
                        }
                    }

                    parallel parallelBuildStages
                }
            }
        }

        stage('Tag and Push Docker Images for MicroServices TAILORING ONLINE') {
            steps {
                script {
                    def parallelDockerStages = [:]

                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-token') {
                        env.MICRO_SERVICES.split(',').each { service ->
                            parallelDockerStages["Tag and Push ${service.capitalize()}"] = {
                                dir("tailoring-online-services/${service}") {
                                    def imageName = "${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}:${service}"
                                    sh """
                                        docker tag ${service}:latest ${imageName}
                                        docker push ${imageName}
                                    """
                                }
                            }
                        }
                    }

                    parallel parallelDockerStages
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up the workspace after the build...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully. All stages passed.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}