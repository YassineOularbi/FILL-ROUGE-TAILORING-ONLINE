pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        SERVICES = [
            'config-server': 'yassineoularbi4/config-server',
            'eureka-server': 'yassineoularbi4/eureka-server',
            'api-gateway-service': 'yassineoularbi4/api-gateway-service',
            'user-management-service': 'yassineoularbi4/user-management-service',
            'store-management-service': 'yassineoularbi4/store-management-service',
            'localization-shipping-service': 'yassineoularbi4/localization-shipping-service',
            'loyalty-program-service': 'yassineoularbi4/loyalty-program-service',
            'notification-mailing-service': 'yassineoularbi4/notification-mailing-service',
            'order-management-service': 'yassineoularbi4/order-management-service',
            'payment-banking-service': 'yassineoularbi4/payment-banking-service',
            'promotion-management-service': 'yassineoularbi4/promotion-management-service',
            'review-management-service': 'yassineoularbi4/review-management-service',
            'social-management-service': 'yassineoularbi4/social-management-service'
        ]
        DOCKER_TOKEN = credentials('docker-token')
        SONARQUBE = 'sonarqube'
        SONAR_TOKEN = credentials('sonar-token')
        GITHUB_TOKEN = credentials('github-credentials')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: GITHUB_TOKEN, url: 'https://github.com/YassineOularbi/FILL-ROUGE-TAILORING-ONLINE.git'
            }
        }

        stage('Build and Test') {
            steps {
                 bat 'mvn clean install'
                 bat 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                 withSonarQubeEnv(SONARQUBE) {
                    bat "mvn sonar:sonar -Dsonar.token=${SONAR_TOKEN}"
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}